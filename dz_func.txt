1)
# Вводится натуральное число n.
# Для этого числа вычислите n-ое число Фибоначчи и выведите сумму этого числа и его факториала.
# Вычисление числа Фибоначчи и факториала вынесите в отдельные функции factorial(n) и fib(n).
# Считайте первое число Фибоначчи равным единице.


n = int(input("enter number: "))


def factorial(n):
    if n == 1:
        return 1
    else:
        return n * factorial(n - 1)


def fib(n):
    if n in (1, 2):
        return 1
    return fib(n - 1) + fib(n - 2)


print(f"факториал {n}: {factorial(n)}, число фибоначи: {fib(n)}")

2) сделано на занятие
def closest_mod_5(x):
    if x % 5 == 0:
        return x
    else:
        return x + (5 - x % 5)


print(closest_mod_5(11))
3)

В языке Python есть некоторые ограничения на имена переменных. Имена переменных
# -могут состоять только из цифр, букв и знаков подчеркивания.
# -не могут начинаться с цифры.
# Программист вводит строки с именами переменных. Для каждой переменной нужно вывести
# "Можно использовать", если ее имя корректно, или "Нельзя использовать",
# если это не так. Определив все нужные переменные, программист заканчивает ввод строкой
# "Поработали, и хватит".
# Для проверки каждой строки используйте функцию check_variable(v).
# Для простоты будем считать, что программист использует только латинские буквы.
def check_variable(v):
    if v[0].isdigit():
        print("Нельзя использовать")
    else:
        print("Можно использовать")


while True:
    variable = input()
    if variable == ".":
        print("Поработали, и хватит")
        break
    check_variable(variable)


4) сделано на занятие

def bank(cash: int, years: int) -> int:
    while years:
        cash += cash * 0.1
        years -= 1
    return cash


print(bank(1000, 5))
5)

# 5.Напишите рекурсивную функцию get_length(obj),
# которая принимает на вход итерируемый объект
# (строку, список или кортеж) и выводит его длину
lst = [1, 3, 41, 321, "hello", 89]
tup = ("hello", 331, "world", 3, 312, 34, 39, 44, 41, 41, 56, 1)
some_str = "hello world"


def get_length(obj):
    if obj in [[], (), ""]:
        return 0
    else:
        return get_length(obj[0:-1:]) + 1


print(get_length(some_str))

6)
#Реализуйте рекурсивную функцию get_pow(a, n),
# которая возводит число a в степень n.
# Для построения рекурсивного алгоритма используйте тот факт,
# что a**n=a*a**(n-1).
# Числа a и n целые и неотрицательные и при этом не могут одновременно равняться нулю.

def get_pow(a, n):
    if n == 1:
        return a

    else:
        return a * get_pow(a, n - 1)


print(get_pow(2, 5))
7)
# Дано натуральное число N. Вычислите сумму его цифр используя рекурсию
n = int(input("enter number: "))


def sum_number(number):
    if number > 9:
        return number % 10 + sum_number(number // 10)
    else:
        return number


print(sum_number(n))
================================================= сделано на занятие 
def sum_numbers(n):
    if n < 10:
        return n
    else:
        return n % 10 + sum_numbers(n // 10)

print(sum_numbers(712125))

